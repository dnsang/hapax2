#summary Hapax2 Language
#labels Featured,Documentation

 <wiki:toc/>

 = H2/CTemplate =
{{{
 Hello, {{=world}}.
}}}

 [http://code.google.com/p/google-ctemplate CTemplate] is a "simple as possible for performance" template language. 

 Any objective may be met through the application of a combination of the following features.  And when met this way, the result will have a maximal runtime performance.

 Hapax2 implements a minimal variant on [http://code.google.com/p/google-ctemplate Google CTemplate].  Most notably, the use of the `"{{=...}}"` syntax for variable dereference rather than configuration.

 == Variable ==

 A value pulled from the [http://code.google.com/p/hapax2/source/browse/trunk/src/hapax/TemplateDictionary.java data dictionary] and emitted.
{{{
 {{var_name}}
}}}
 or (equivalently)
{{{
 {{=var_name}}
}}}

 == Comment ==

 A multiline ctemplate comment is formed in the following syntax.
{{{
 {{!...}}
}}}

 == Section ==

 A section is iterated zero or more times according to the [http://code.google.com/p/hapax2/source/browse/trunk/src/hapax/TemplateDictionary.java data dictionary]. 
{{{
 {{#sectionName}}
   ...
 {{/sectionName}}
}}}
 The iteration of a section (or include) is controlled by the sections programmatically added into the [http://code.google.com/p/hapax2/source/browse/trunk/src/hapax/TemplateDictionary.java data dictionary] as child data dictionaries in a section list.

 Sections are defined in one or more instances in the data dictionary, as in the following example.
{{{
  {{#menu}}
    {{#submenu}}
      {{#menu}}{{/menu}}
    {{/submenu}}
  {{/menu}}
}}}
 This template will work for both
{{{
  TemplateDataDictionary doc = new TemplateDictionary();
  TemplateDataDictionary menu = doc.addSection("menu");
  TemplateDataDictionary sm = menu.addSection("submenu");
  TemplateDataDictionary ssm = sm.addSection("menu");
}}}
 and
{{{
  TemplateDataDictionary doc = new TemplateDictionary();
  TemplateDataDictionary menu = doc.addSection("menu");
  TemplateDataDictionary sm = menu.addSection("submenu");
}}}

 In the second case, the section "menu" is referenced from the parent of "submenu", and in the first case this section is found within "submenu".

 See also [Example#Repetition]. 

 == Include ==

 The include is an "external" section.  The [http://code.google.com/p/hapax2/source/browse/trunk/src/hapax/TemplateDictionary.java data dictionary] must enable the include by defining one or more sections for one or more iterations of the include.
{{{
 {{>name}}
}}}
 The include name may be redirected by a variable defined in the [http://code.google.com/p/hapax2/source/browse/trunk/src/hapax/TemplateDictionary.java data dictionary].  A positive value for a variable of the same name will be employed as the template file base name.  Under variable redirection, the include section name remains the name defined in the template.

 The template file is resolved from the template name (or variable value) by prepending the context directory path, and appending the dot "xtm" filename extension.

 The resolved template file may be a URL.

 See also [Example#Inclusion]. 

 == Special iteration sections ==

 Within a section or include are defined five special sections as aids to iteration.  These are named for the section or include name string, with a special suffix string appended.  
{{{
 {{#field}}{{#field_it_NotFirst}},{{/field_it_NotFirst}} {{=field_name}}{{/field}}
}}}
 These special section names are enumerated in the following patterns.

 <dl>

 <dt><tt>name_it_NotFirst</tt>
 <dd> Sections in scope having a name in this pattern are visible when not in the first iteration.

 <dt><tt>name_it_First</tt>
 <dd> Sections in scope having a name in this pattern are visible in the first iteration.

 <dt><tt>name_it_NotLast</tt>
 <dd> Sections in scope having a name in this pattern are visible when not in the last iteration.

 <dt><tt>name_it_Last</tt>
 <dd> Sections in scope having a name in this pattern are visible in the last iteration.

 <dt><tt>name_it_Exclusive</tt>
 <dd> Sections in scope having a name in this pattern are visible when not the first and not the last.

 == Recursive Include ==

 A template file that includes itself will cause a stack overflow.

 For example, a template file named
{{{
  a.xtm
}}}
 that defines the include 
{{{
 {{>a}}
}}}
 to include itself will cause the following stack overflow exception as seen in  [http://code.google.com/p/hapax2/issues/detail?id=1 Issue #1] [http://hapax2.googlecode.com/svn/issues/1 (src)]
{{{
	at hapax.TemplateDictionary.getVariable(TemplateDictionary.java:148)
	at hapax.TemplateDictionary.getVariable(TemplateDictionary.java:148)
	at hapax.TemplateDictionary.getVariable(TemplateDictionary.java:148)
	at hapax.TemplateDictionary.getVariable(TemplateDictionary.java:148)
	at hapax.TemplateDictionary.getVariable(TemplateDictionary.java:148)
	at hapax.TemplateDictionary.getVariable(TemplateDictionary.java:148)
}}}

 It may be possible, although tricky, to accomplish a similar objective through a few similar templates controlled via template renaming.  A template include name (e.g. "a") may be renamed by setting a variable to map it to another name (e.g. from "a" to "b").  An empty template file (e.g. "nil") would be employed to redirect or retarget the inclusion in the leaves of the data dictionary tree.

